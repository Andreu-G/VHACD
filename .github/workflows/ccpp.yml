name: C/C++ CI

on: [push]

jobs:
  create_release:
    runs-on: windows-latest
    
    steps:
    - name: make release
      uses: actions/create-release@v1.0.0
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: true
        tag_name: ${{ github.ref }}
        release_name: build of ${{ github.sha }}

    - run: echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt
    - uses: actions/upload-artifact@v1
      with:
        name: release-url
        path: release-url.txt

  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: windows-latest
            cmake_type: "Visual Studio 16 2019"
            dll_name: "Debug/libvhacd.dll"
            target_dll_name: "libvhacd.dll"
          - platform: ubuntu-latest
            cmake_type: "Unix Makefiles"
            dll_name: "liblibvhacd.so"
            target_dll_name: "liblibvhacd.so"
          - platform: macos-latest
            cmake_type: "Unix Makefiles"
            dll_name: "liblibvhacd.dylib"
            target_dll_name: "liblibvhacd.bundle"

    runs-on: ${{ matrix.platform }}
    
    needs: [create_release]
    
    steps:
    - uses: actions/checkout@v1
    - uses: ilammy/msvc-dev-cmd@v1.0.0
      
    - name: configure
      run: |
        mkdir build
        cd build
        cmake -G "${{ matrix.cmake_type }}" ../src
    - name: build
      run: cmake --build build --config Debug
      
    - name: archive build
      run: |
        mkdir build/VHACD
        ls build/dll
        cp build/dll/${{ matrix.dll_name }} build/VHACD/${{ matrix.target_dll_name }}
        cp src/dll/VHACD.cs build/VHACD/VHACD.cs
        cp src/dll/vhacd.asmdef build/VHACD/vhacd.asmdef
        cp src/dll/vhacd.asmdef.meta build/VHACD/vhacd.asmdef.meta
        cd build
        jar -cMf ${{ matrix.platform }}.zip VHACD
        
    - uses: actions/download-artifact@v1
      with:
          name: release-url
          
    - shell: bash
      run: |
        value=`cat release-url.txt`
        echo The result is $value

#     - name: upload zip
#       uses: actions/upload-release-asset@v1.0.1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{  jobs.create_release.steps.create_release.outputs.upload_url }} 
#         asset_path: ./build/${{ matrix.platform }}.zip
#         asset_name: ${{ matrix.platform }}.zip
#         asset_content_type: application/zip
